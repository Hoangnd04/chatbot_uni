import google.generativeai as genai
from rest_framework.response import Response
from rest_framework.decorators import api_view
from django.shortcuts import get_object_or_404
from .models import ChatMessage, Conversation
from .serializers import ChatMessageSerializer, ConversationSerializer
from datetime import datetime
import pytz
import torch
import numpy as np
from typing import List, Dict
from qdrant_client import QdrantClient
from transformers import AutoTokenizer, AutoModel
from dotenv import load_dotenv
import os

CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
os.chdir(CURRENT_DIR)

load_dotenv()

# --- Qdrant c·∫•u h√¨nh ---
QDRANT_URL = os.getenv("QDRANT_URL")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
COLLECTION_NAME = os.getenv("COLLECTION_NAME")
EMBEDDING_MODEL = "VoVanPhuc/sup-SimCSE-VietNamese-phobert-base"
MAX_LENGTH = 256

# Qdrant client v√† model
qdrant_client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)
tokenizer = AutoTokenizer.from_pretrained(EMBEDDING_MODEL, use_fast=False)
model = AutoModel.from_pretrained(EMBEDDING_MODEL)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)
model.eval()

def get_query_embedding(query: str) -> List[float]:
    inputs = tokenizer(query, padding='max_length', truncation=True, max_length=MAX_LENGTH, return_tensors="pt").to(device)
    with torch.no_grad():
        outputs = model(**inputs)
    embedding = outputs.last_hidden_state.mean(dim=1).cpu().numpy()
    return embedding[0].tolist()

def retrieve_documents(query: str, top_k: int = 3) -> List[Dict]:
    try:
        query_embedding = get_query_embedding(query)
        results = qdrant_client.search(
            collection_name=COLLECTION_NAME,
            query_vector=query_embedding,
            limit=top_k,
            with_payload=True
        )
        return [{
            "score": hit.score,
            "title": hit.payload.get("title", ""),
            "content": hit.payload.get("content", ""),
            "source": hit.payload.get("source_file", "")
        } for hit in results]
    except Exception as e:
        print(f"L·ªói khi truy v·∫•n Qdrant: {e}")
        return []

def format_response(documents: List[Dict]) -> str:
    if not documents:
        return "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu ph√π h·ª£p."
    response = ""
    for i, doc in enumerate(documents):
        response += f"\nT√†i li·ªáu {i} (score {doc['score']:.2f}):\nTi√™u ƒë·ªÅ: {doc['title']}\nN·ªôi dung: {doc['content']}\n"
    return response

# --- Google Gemini c·∫•u h√¨nh ---
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

def get_chat_response(user_message, history):
    model = genai.GenerativeModel("gemini-2.0-flash")
    tz = pytz.timezone("Asia/Ho_Chi_Minh")
    current_date = datetime.now(tz).strftime("%d/%m/%Y %H:%M:%S")
    # print(f"Current date: {current_date}")
    generation_config = {
        "temperature": 0.3,
        "max_output_tokens": 2048,
        "top_k": 20,
        "top_p": 0.95,
    }

    documents = retrieve_documents(user_message)
    docs_summary = format_response(documents)
    # print(docs_summary)

    base_prompt = f'''
    B·∫°n l√† m·ªôt chatbot, tr·ª£ l√Ω ·∫£o th√¥ng minh v√† ƒë∆∞·ª£c sinh ra v·ªõi m·ª•c ƒë√≠ch t∆∞ v·∫•n tuy·ªÉn sinh cho tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng ngh·ªá Th√¥ng tin - ƒêHQG TP.HCM (UIT). B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn tuy·ªÉn sinh, ng√†nh h·ªçc, ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o v√† c√°c th√¥ng tin kh√°c li√™n quan ƒë·∫øn tr∆∞·ªùng d·ª±a v√†o c√°c t√†i li·ªáu tham kh·∫£o.
    ‚ùóÔ∏èQUAN TR·ªåNG: B·∫°n ph·∫£i s·ª≠ d·ª•ng to√†n b·ªô n·ªôi dung t·ª´ c√°c t√†i li·ªáu tham kh·∫£o ƒë·ªÉ tr·∫£ l·ªùi. H√£y ƒë√°nh gi√°, so s√°nh v√† t·ªïng h·ª£p th√¥ng tin t·ª´ nhi·ªÅu t√†i li·ªáu n·∫øu c·∫ßn thi·∫øt ƒë·ªÉ t·∫°o ra c√¢u tr·∫£ l·ªùi ch√≠nh x√°c v√† ƒë·∫ßy ƒë·ªß nh·∫•t.

    üìå Nguy√™n t·∫Øc b·∫Øt bu·ªôc:
    1. T·ª´ t·∫•t c·∫£ c√°c t√†i li·ªáu tham kh·∫£o, b·∫°n c·∫ßn ƒë·ªçc h·∫øt m·ªôt c√°ch chi ti·∫øt c√°c t√†i li·ªáu ƒë√≥ sau ƒë√≥ x√°c ƒë·ªãnh c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn t·∫•t c·∫£ t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p kh√¥ng v√† tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ch√≠nh x√°c, ƒë·∫ßy ƒë·ªß nh·∫•t.
    2. N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn c√°c t√†i li·ªáu hi·ªán t·∫°i, b·∫°n c·∫ßn tr·∫£ l·ªùi d·ª±a tr√™n c√°c t√†i li·ªáu ƒë√£ ƒë∆∞·ª£c cung c·∫•p.
    3. N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn t√†i li·ªáu hi·ªán t·∫°i, b·∫°n v·∫´n c√≥ th·ªÉ tr·∫£ l·ªùi b·∫±ng ki·∫øn th·ª©c chung, nh∆∞ng ph·∫£i m·ªü ƒë·∫ßu r√µ r√†ng:
    ‚Üí "C√¢u h·ªèi n√†y kh√¥ng n·∫±m trong c√°c t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p. T√¥i s·∫Ω s·ª≠ d·ª•ng ki·∫øn th·ª©c chung ƒë·ªÉ tr·∫£ l·ªùi:"
    4. S·ª≠ d·ª•ng font Unicode ti√™u chu·∫©n.
    5. N·∫øu ng∆∞·ªùi d√πng h·ªèi b·∫±ng ng√¥n ng·ªØ kh√°c, kh√¥ng ph·∫£i ti·∫øng Vi·ªát, h√£y h·ªèi l·∫°i l·ªãch s·ª±:
    ‚Üí "B·∫°n c√≥ mu·ªën t√¥i tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát kh√¥ng?"

    üìÖ Ng√†y hi·ªán t·∫°i: {current_date}
    üè´ Tr∆∞·ªùng: ƒê·∫°i h·ªçc C√¥ng ngh·ªá Th√¥ng tin - ƒêHQG TP.HCM (UIT)
    üìö Danh s√°ch c√°c t√†i li·ªáu tham kh·∫£o:
    {docs_summary}

    '''

    history_text = "".join(
        f"Ng∆∞·ªùi d√πng: {msg.user_message}\nChatbot_uni: {msg.bot_response}\n" for msg in history
    )
    new_message = f"Ng∆∞·ªùi d√πng: {user_message}\nChatbot_uni:"

    full_content = base_prompt + "\n"

    if len(history_text) + len(new_message) > 12000:
        full_content += "L·ªãch s·ª≠ h·ªôi tho·∫°i qu√° d√†i.\n"

    full_content += history_text + new_message

    response = model.generate_content(full_content, generation_config=generation_config)
    final_text = response.text
    return final_text

# --- API Views ---
@api_view(['GET', 'POST', 'DELETE'])
def conversation_handler(request):
    user_id = request.headers.get('X-User-ID')
    if not user_id:
        return Response({'error': 'Unauthorized'}, status=401)

    if request.method == "GET":
        conversation_index = request.GET.get("conversation_index")
        conversation = get_object_or_404(Conversation, conversation_index=conversation_index, user_id=user_id)
        messages = ChatMessage.objects.filter(conversation=conversation).order_by("index")
        return Response({
            "conversation_index": conversation.conversation_index,
            "messages": ChatMessageSerializer(messages, many=True).data
        })

    elif request.method == "POST":
        message = request.data.get('message', '')
        conversation_index = request.GET.get("conversation_index") or request.data.get('conversation_index')

        if not message:
            return Response({'error': 'Message is required'}, status=400)

        if conversation_index:
            conversation = get_object_or_404(Conversation, conversation_index=conversation_index, user_id=user_id)
        else:
            conversation = Conversation.objects.create(user_id=user_id)

        current_message_count = ChatMessage.objects.filter(conversation=conversation).count()
        history_messages = ChatMessage.objects.filter(conversation=conversation).order_by("index")

        response = get_chat_response(message, history_messages)
        chat = ChatMessage.objects.create(
            conversation=conversation, index=current_message_count,
            user_message=message, bot_response=response
        )

        return Response({
            "conversation_index": conversation.conversation_index,
            "chat": ChatMessageSerializer(chat).data
        })

    elif request.method == "DELETE":
        conversation_index = request.GET.get("conversation_index") or request.data.get("conversation_index")
        conversation = get_object_or_404(Conversation, conversation_index=conversation_index, user_id=user_id)
        conversation.delete()
        return Response({"message": "Deleted successfully"}, status=200)

@api_view(['GET'])
def conversation_history(request):
    user_id = request.headers.get('X-User-ID')
    conversations = Conversation.objects.filter(user_id=user_id).order_by('-conversation_index')
    if not conversations.exists():
        return Response({"error": "Kh√¥ng c√≥ h·ªôi tho·∫°i n√†o."}, status=404)
    return Response(ConversationSerializer(conversations, many=True).data)

@api_view(['POST'])
def create_new_conversation(request):
    user_id = request.headers.get('X-User-ID')
    conversation = Conversation.objects.create(user_id=user_id)
    return Response({"conversation_index": conversation.conversation_index})
